/*
 * This file is generated by jOOQ.
 */
package com.sivalabs.bookmarks.jooq.tables;


import com.sivalabs.bookmarks.jooq.Keys;
import com.sivalabs.bookmarks.jooq.Public;
import com.sivalabs.bookmarks.jooq.tables.records.CounterRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Counter extends TableImpl<CounterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.counter</code>
     */
    public static final Counter COUNTER = new Counter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CounterRecord> getRecordType() {
        return CounterRecord.class;
    }

    /**
     * The column <code>public.counter.id</code>.
     */
    public final TableField<CounterRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.counter.value</code>.
     */
    public final TableField<CounterRecord, Integer> VALUE = createField(DSL.name("value"), SQLDataType.INTEGER.nullable(false), this, "");

    private Counter(Name alias, Table<CounterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Counter(Name alias, Table<CounterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.counter</code> table reference
     */
    public Counter(String alias) {
        this(DSL.name(alias), COUNTER);
    }

    /**
     * Create an aliased <code>public.counter</code> table reference
     */
    public Counter(Name alias) {
        this(alias, COUNTER);
    }

    /**
     * Create a <code>public.counter</code> table reference
     */
    public Counter() {
        this(DSL.name("counter"), null);
    }

    public <O extends Record> Counter(Table<O> child, ForeignKey<O, CounterRecord> key) {
        super(child, key, COUNTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CounterRecord> getPrimaryKey() {
        return Keys.COUNTER_PKEY;
    }

    @Override
    public Counter as(String alias) {
        return new Counter(DSL.name(alias), this);
    }

    @Override
    public Counter as(Name alias) {
        return new Counter(alias, this);
    }

    @Override
    public Counter as(Table<?> alias) {
        return new Counter(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Counter rename(String name) {
        return new Counter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Counter rename(Name name) {
        return new Counter(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Counter rename(Table<?> name) {
        return new Counter(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
